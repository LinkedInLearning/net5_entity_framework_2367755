// <auto-generated />
using System;
using LibraryManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibraryManager.Data.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20210703082351_AddedSampleData")]
    partial class AddedSampleData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LibraryManager.Data.AuditEntry", b =>
                {
                    b.Property<int>("AuditEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtendedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("OPeration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditEntryId");

                    b.HasIndex("CountryId");

                    b.ToTable("AuditEntries");
                });

            modelBuilder.Entity("LibraryManager.Data.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            LastName = "King",
                            Name = "Stephen"
                        },
                        new
                        {
                            AuthorId = 2,
                            LastName = "Asimov",
                            Name = "Isaac"
                        });
                });

            modelBuilder.Entity("LibraryManager.Data.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("Sinopsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1,
                            PublisherId = 1,
                            Sinopsis = "El libro \"Los ojos del dragón\".",
                            Title = "Los ojos del dragón"
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 1,
                            PublisherId = 1,
                            Sinopsis = "Es el libro \"La torre oscura I\".",
                            Title = "La torre oscura I"
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 2,
                            PublisherId = 1,
                            Sinopsis = "Es el libro \"Yo, robot\".\".",
                            Title = "Yo, robot"
                        });
                });

            modelBuilder.Entity("LibraryManager.Data.BookFile", b =>
                {
                    b.Property<int>("BookFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookFormatId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("InternalFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookFileId");

                    b.HasIndex("BookFormatId");

                    b.HasIndex("BookId");

                    b.ToTable("BookFiles");
                });

            modelBuilder.Entity("LibraryManager.Data.BookFormat", b =>
                {
                    b.Property<int>("BookformatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookformatId");

                    b.ToTable("BookFormats");
                });

            modelBuilder.Entity("LibraryManager.Data.BookRating", b =>
                {
                    b.Property<int>("BookRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookRatingId");

                    b.HasIndex("BookId");

                    b.ToTable("BookRatings");

                    b.HasData(
                        new
                        {
                            BookRatingId = 1,
                            BookId = 1,
                            Stars = 5,
                            Username = "juanjo"
                        },
                        new
                        {
                            BookRatingId = 2,
                            BookId = 1,
                            Stars = 3,
                            Username = "Lola"
                        },
                        new
                        {
                            BookRatingId = 3,
                            BookId = 1,
                            Stars = 4,
                            Username = "Silvia"
                        },
                        new
                        {
                            BookRatingId = 4,
                            BookId = 1,
                            Stars = 2,
                            Username = "Diego"
                        },
                        new
                        {
                            BookRatingId = 5,
                            BookId = 2,
                            Stars = 4,
                            Username = "juanjo"
                        },
                        new
                        {
                            BookRatingId = 6,
                            BookId = 2,
                            Stars = 2,
                            Username = "Lola"
                        },
                        new
                        {
                            BookRatingId = 7,
                            BookId = 2,
                            Stars = 5,
                            Username = "Silvia"
                        },
                        new
                        {
                            BookRatingId = 8,
                            BookId = 2,
                            Stars = 5,
                            Username = "Diego"
                        });
                });

            modelBuilder.Entity("LibraryManager.Data.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NativeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("LibraryManager.Data.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            Name = "Entre letras"
                        });
                });

            modelBuilder.Entity("LibraryManager.Data.AuditEntry", b =>
                {
                    b.HasOne("LibraryManager.Data.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("LibraryManager.Data.Book", b =>
                {
                    b.HasOne("LibraryManager.Data.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManager.Data.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryManager.Data.BookFile", b =>
                {
                    b.HasOne("LibraryManager.Data.BookFormat", "Format")
                        .WithMany()
                        .HasForeignKey("BookFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManager.Data.Book", "Book")
                        .WithMany("BookFiles")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Format");
                });

            modelBuilder.Entity("LibraryManager.Data.BookRating", b =>
                {
                    b.HasOne("LibraryManager.Data.Book", "Book")
                        .WithMany("Ratings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryManager.Data.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManager.Data.Book", b =>
                {
                    b.Navigation("BookFiles");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
